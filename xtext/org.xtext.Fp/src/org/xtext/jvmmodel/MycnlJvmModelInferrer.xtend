/*
 * generated by Xtext 2.18.0
 */
package org.xtext.jvmmodel

import com.google.inject.Inject
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder
import org.xtext.fp.Model
import org.xtext.fp.findtempBuilAction
import org.xtext.fp.findtempDemolish
import org.xtext.fp.findtempPlantTrees
import org.xtext.fp.findtempCutTrees
import org.xtext.fp.findtempPlantBushes
import org.xtext.fp.findtempRemoveBushes
import org.xtext.fp.findtempCreateLake
import org.xtext.fp.findtempRemoveLake
import org.xtext.fp.caltreesBuildAction
import org.xtext.fp.DesignCommercial
import org.xtext.fp.DesignResidential
import org.xtext.fp.DesignEducational
import org.xtext.fp.showRegion

/**
 * <p>Infers a JVM model from the source model.</p> 
 *
 * <p>The JVM model should contain all elements that would appear in the Java code 
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>     
 */
class MycnlJvmModelInferrer extends AbstractModelInferrer {

	/**
	 * convenience API to build and initialize JVM types and their members.
	 */
	@Inject extension JvmTypesBuilder

	/**
	 * The dispatch method {@code infer} is called for each instance of the
	 * given element's type that is contained in a resource.
	 * 
	 * @param element
	 *            the model to create one or more
	 *            {@link org.eclipse.xtext.common.types.JvmDeclaredType declared
	 *            types} from.
	 * @param acceptor
	 *            each created
	 *            {@link org.eclipse.xtext.common.types.JvmDeclaredType type}
	 *            without a container should be passed to the acceptor in order
	 *            get attached to the current resource. The acceptor's
	 *            {@link IJvmDeclaredTypeAcceptor#accept(org.eclipse.xtext.common.types.JvmDeclaredType)
	 *            accept(..)} method takes the constructed empty type for the
	 *            pre-indexing phase. This one is further initialized in the
	 *            indexing phase using the lambda you pass as the last argument.
	 * @param isPreIndexingPhase
	 *            whether the method is called in a pre-indexing phase, i.e.
	 *            when the global index is not yet fully updated. You must not
	 *            rely on linking using the index if isPreIndexingPhase is
	 *            <code>true</code>.
	 */
	def dispatch void infer(Model element, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
		
		for (feature: element.query){
			switch feature{
				findtempBuilAction: {
					acceptor.accept(element.toClass("DetailsExtractor"))
					[
						members += feature.toField("buildingCount",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.no_of_buildings + '''''')]
						]
						members += feature.toGetter("buildingCount", typeRef(int))
						members += feature.toSetter("buildingCount", typeRef(int))
						
						members += feature.toField("l",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.length + '''''')]
						]
						members += feature.toGetter("l", typeRef(int))
						members += feature.toSetter("l", typeRef(int))
						
						members += feature.toField("b",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.breadth + '''''')]
						]
						members += feature.toGetter("b", typeRef(int))
						members += feature.toSetter("b", typeRef(int))
						
						members += feature.toField("h",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.height + '''''')]
						]
						members += feature.toGetter("h", typeRef(int))
						members += feature.toSetter("h", typeRef(int))
						
						members += feature.toField("region",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.region + '''''')]
						]
						members += feature.toGetter("region", typeRef(int))
						members += feature.toSetter("region", typeRef(int))
						
						
						members += feature.toMethod("main", feature.newTypeRef(Void::TYPE))
						[
							parameters += feature.toParameter("args", feature.newTypeRef(typeof(String)).addArrayTypeDimension)
							static = true;
							varArgs = true;
							body = [
								append
								(
									'''
										System.out.println("findtempBuilAction");
										Region region1 = new Region();
										region1.calculateInitialLCZ(region);
										region1.findTempBuildAction(buildingCount,l,b,h);
									'''
								)
							]	
						]
					]
				}
				
				findtempDemolish: {
					acceptor.accept(element.toClass("DetailsExtractor"))
					[
						members += feature.toField("buildingCount",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.no_of_buildings + '''''')]
						]
						members += feature.toGetter("buildingCount", typeRef(int))
						members += feature.toSetter("buildingCount", typeRef(int))
						
						members += feature.toField("l",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.length + '''''')]
						]
						members += feature.toGetter("l", typeRef(int))
						members += feature.toSetter("l", typeRef(int))
						
						members += feature.toField("b",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.breadth + '''''')]
						]
						members += feature.toGetter("b", typeRef(int))
						members += feature.toSetter("b", typeRef(int))
						
						members += feature.toField("h",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.height + '''''')]
						]
						members += feature.toGetter("h", typeRef(int))
						members += feature.toSetter("h", typeRef(int))
						
						members += feature.toField("region",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.region + '''''')]
						]
						members += feature.toGetter("region", typeRef(int))
						members += feature.toSetter("region", typeRef(int))
						
						
						members += feature.toMethod("main", feature.newTypeRef(Void::TYPE))
						[
							parameters += feature.toParameter("args", feature.newTypeRef(typeof(String)).addArrayTypeDimension)
							static = true;
							varArgs = true;
							body = [
								append
								(
									'''
										System.out.println("findtempDemolish");
										Region region1 = new Region();
										region1.calculateInitialLCZ(region);
										region1.findtempDemolish(buildingCount,l,b,h);
										
									'''
								)
							]	
						]
					]
				}
				
				findtempPlantTrees: {
					acceptor.accept(element.toClass("DetailsExtractor"))
					[						
						members += feature.toField("treeCount",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.no_of_trees + '''''')]
						]
						members += feature.toGetter("treeCount", typeRef(int))
						members += feature.toSetter("treeCount", typeRef(int))
						
						members += feature.toField("region",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.region + '''''')]
						]
						members += feature.toGetter("region", typeRef(int))
						members += feature.toSetter("region", typeRef(int))
						
						members += feature.toMethod("main", feature.newTypeRef(Void::TYPE))
						[
							parameters += feature.toParameter("args", feature.newTypeRef(typeof(String)).addArrayTypeDimension)
							static = true;
							varArgs = true;
							body = [
								append
								(
									'''
										System.out.println("findtempPlantTrees");
										Region region1 = new Region();
										region1.calculateInitialLCZ(region);
										region1.findtempPlantTrees(treeCount);
										
									'''
								)
							]	
						]
					]
				}
				
				findtempCutTrees: {
					acceptor.accept(element.toClass("DetailsExtractor"))
					[						
						members += feature.toField("treeCount",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.no_of_trees + '''''')]
						]
						members += feature.toGetter("treeCount", typeRef(int))
						members += feature.toSetter("treeCount", typeRef(int))
						
						members += feature.toField("region",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.region + '''''')]
						]
						members += feature.toGetter("region", typeRef(int))
						members += feature.toSetter("region", typeRef(int))
						
						
						members += feature.toMethod("main", feature.newTypeRef(Void::TYPE))
						[
							parameters += feature.toParameter("args", feature.newTypeRef(typeof(String)).addArrayTypeDimension)
							static = true;
							varArgs = true;
							body = [
								append
								(
									'''
										System.out.println("findtempCutTrees");
										Region region1 = new Region();
										region1.calculateInitialLCZ(region);
										region1.findtempCutTrees(treeCount);
									'''
								)
							]	
						]
					]
				}
				
				findtempPlantBushes: {
					acceptor.accept(element.toClass("DetailsExtractor"))
					[						
						members += feature.toField("area",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.area + '''''')]
						]
						members += feature.toGetter("area", typeRef(int))
						members += feature.toSetter("area", typeRef(int))
						
						members += feature.toField("region",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.region + '''''')]
						]
						members += feature.toGetter("region", typeRef(int))
						members += feature.toSetter("region", typeRef(int))
						
						
						members += feature.toMethod("main", feature.newTypeRef(Void::TYPE))
						[
							parameters += feature.toParameter("args", feature.newTypeRef(typeof(String)).addArrayTypeDimension)
							static = true;
							varArgs = true;
							body = [
								append
								(
									'''
										System.out.println("findtempPlantBushes");
										Region region1 = new Region();
										region1.calculateInitialLCZ(region);
										region1.findtempPlantBushes(area);
									'''
								)
							]	
						]
					]
				}
				
				findtempRemoveBushes: {
					acceptor.accept(element.toClass("DetailsExtractor"))
					[
						members += feature.toField("area",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.area + '''''')]
						]
						members += feature.toGetter("area", typeRef(int))
						members += feature.toSetter("area", typeRef(int))
						
						members += feature.toField("region",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.region + '''''')]
						]
						members += feature.toGetter("region", typeRef(int))
						members += feature.toSetter("region", typeRef(int))
						
						
						members += feature.toMethod("main", feature.newTypeRef(Void::TYPE))
						[
							parameters += feature.toParameter("args", feature.newTypeRef(typeof(String)).addArrayTypeDimension)
							static = true;
							varArgs = true;
							body = [
								append
								(
									'''
										System.out.println("findtempRemoveBushes");
										Region region1 = new Region();
										region1.calculateInitialLCZ(region);
										region1.findtempRemoveBushes(area);
									'''
								)
							]	
						]
					]
				}
				
				findtempCreateLake: {
					acceptor.accept(element.toClass("DetailsExtractor"))
					[
						members += feature.toField("area",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.area + '''''')]
						]
						members += feature.toGetter("area", typeRef(int))
						members += feature.toSetter("area", typeRef(int))
						
						members += feature.toField("region",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.region + '''''')]
						]
						members += feature.toGetter("region", typeRef(int))
						members += feature.toSetter("region", typeRef(int))
						
						
						members += feature.toMethod("main", feature.newTypeRef(Void::TYPE))
						[
							parameters += feature.toParameter("args", feature.newTypeRef(typeof(String)).addArrayTypeDimension)
							static = true;
							varArgs = true;
							body = [
								append
								(
									'''
										System.out.println("findtempCreateLake");
										Region region1 = new Region();
										region1.calculateInitialLCZ(region);
										region1.findtempCreateLake(area);
									'''
								)
							]	
						]
					]
				}
				
				findtempRemoveLake: {
					acceptor.accept(element.toClass("DetailsExtractor"))
					[
						members += feature.toField("area",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.area + '''''')]
						]
						members += feature.toGetter("area", typeRef(int))
						members += feature.toSetter("area", typeRef(int))
						
						members += feature.toField("region",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.region + '''''')]
						]
						members += feature.toGetter("region", typeRef(int))
						members += feature.toSetter("region", typeRef(int))
						
						
						members += feature.toMethod("main", feature.newTypeRef(Void::TYPE))
						[
							parameters += feature.toParameter("args", feature.newTypeRef(typeof(String)).addArrayTypeDimension)
							static = true;
							varArgs = true;
							body = [
								append
								(
									'''
										System.out.println("findtempRemoveLake");
										Region region1 = new Region();
										region1.calculateInitialLCZ(region);
										region1.findtempRemoveLake(area);
									'''
								)
							]	
						]
					]
				}
				
				caltreesBuildAction: {
					acceptor.accept(element.toClass("DetailsExtractor"))
					[
						members += feature.toField("buildingCount",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.no_of_buildings + '''''')]
						]
						members += feature.toGetter("buildingCount", typeRef(int))
						members += feature.toSetter("buildingCount", typeRef(int))
						
						members += feature.toField("l",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.length + '''''')]
						]
						members += feature.toGetter("l", typeRef(int))
						members += feature.toSetter("l", typeRef(int))
						
						members += feature.toField("b",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.breadth + '''''')]
						]
						members += feature.toGetter("b", typeRef(int))
						members += feature.toSetter("b", typeRef(int))
						
						members += feature.toField("h",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.height + '''''')]
						]
						members += feature.toGetter("h", typeRef(int))
						members += feature.toSetter("h", typeRef(int))
						
						members += feature.toField("region",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.region + '''''')]
						]
						members += feature.toGetter("region", typeRef(int))
						members += feature.toSetter("region", typeRef(int))
						
						
						members += feature.toMethod("main", feature.newTypeRef(Void::TYPE))
						[
							parameters += feature.toParameter("args", feature.newTypeRef(typeof(String)).addArrayTypeDimension)
							static = true;
							varArgs = true;
							body = [
								append
								(
									'''
										System.out.println("caltreesBuildAction");
										Region region1 = new Region();
										region1.calculateInitialLCZ(region);
										region1.caltreesBuildAction(buildingCount,l,b,h);
									'''
								)
							]	
						]
					]
				}
				
				
				DesignCommercial: {
					acceptor.accept(element.toClass("DetailsExtractor"))
					[
						members += feature.toField("flag",typeRef(String))
						[
							static = true;
							initializer = [append('''"'''+"DesignCommercial"+'''"''')]
						]
						members += feature.toGetter("flag", typeRef(String))
						members += feature.toSetter("flag", typeRef(String))
						
						members += feature.toField("peopleCount",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.no_of_people + '''''')]
						]
						members += feature.toGetter("peopleCount", typeRef(int))
						members += feature.toSetter("peopleCount", typeRef(int))
						
						members += feature.toField("region",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.region + '''''')]
						]
						members += feature.toGetter("region", typeRef(int))
						members += feature.toSetter("region", typeRef(int))
						
						
						members += feature.toMethod("main", feature.newTypeRef(Void::TYPE))
						[
							parameters += feature.toParameter("args", feature.newTypeRef(typeof(String)).addArrayTypeDimension)
							static = true;
							varArgs = true;
							body = [
								append
								(
									'''
									System.out.println("DesignCommercial");
									Region region1 = new Region();
									region1.calculateInitialLCZ(region);
									region1.DesignCommercial(peopleCount);
									
									'''
								)
							]	
						]
					]
				}
				
				DesignResidential: {
					acceptor.accept(element.toClass("DetailsExtractor"))
					[
						members += feature.toField("flag",typeRef(String))
						[
							static = true;
							initializer = [append('''"'''+"DesignResidential"+'''"''')]
						]
						members += feature.toGetter("flag", typeRef(String))
						members += feature.toSetter("flag", typeRef(String))
						
						members += feature.toField("peopleCount",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.no_of_people + '''''')]
						]
						members += feature.toGetter("peopleCount", typeRef(int))
						members += feature.toSetter("peopleCount", typeRef(int))
						
						members += feature.toField("region",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.region + '''''')]
						]
						members += feature.toGetter("region", typeRef(int))
						members += feature.toSetter("region", typeRef(int))
						
						
						members += feature.toMethod("main", feature.newTypeRef(Void::TYPE))
						[
							parameters += feature.toParameter("args", feature.newTypeRef(typeof(String)).addArrayTypeDimension)
							static = true;
							varArgs = true;
							body = [
								append
								(
									'''
										System.out.println("DesignResidential");
										Region region1 = new Region();
										region1.calculateInitialLCZ(region);
										region1.DesignResidential(peopleCount);
									'''
								)
							]	
						]
					]
				}
				
				DesignEducational: {
					acceptor.accept(element.toClass("DetailsExtractor"))
					[
						members += feature.toField("flag",typeRef(String))
						[
							static = true;
							initializer = [append('''"'''+"DesignEducational"+'''"''')]
						]
						members += feature.toGetter("flag", typeRef(String))
						members += feature.toSetter("flag", typeRef(String))
						
						members += feature.toField("peopleCount",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.no_of_people + '''''')]
						]
						members += feature.toGetter("peopleCount", typeRef(int))
						members += feature.toSetter("peopleCount", typeRef(int))
						
						members += feature.toField("region",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.region + '''''')]
						]
						members += feature.toGetter("region", typeRef(int))
						members += feature.toSetter("region", typeRef(int))
						
						
						members += feature.toMethod("main", feature.newTypeRef(Void::TYPE))
						[
							parameters += feature.toParameter("args", feature.newTypeRef(typeof(String)).addArrayTypeDimension)
							static = true;
							varArgs = true;
							body = [
								append
								(
									'''
										System.out.println("DesignEducational");
										Region region1 = new Region();
										region1.calculateInitialLCZ(region);
										region1.DesignEducational(peopleCount);
									'''
								)
							]	
						]
					]
				}
				
				showRegion: {
					acceptor.accept(element.toClass("DetailsExtractor"))
					[						
						members += feature.toField("region",typeRef(int))
						[
							static = true;
							initializer = [append('''''' + feature.region + '''''')]
						]
						members += feature.toGetter("region", typeRef(int))
						members += feature.toSetter("region", typeRef(int))
						
						
						members += feature.toMethod("main", feature.newTypeRef(Void::TYPE))
						[
							parameters += feature.toParameter("args", feature.newTypeRef(typeof(String)).addArrayTypeDimension)
							static = true;
							varArgs = true;
							body = [
								append
								(
									'''
										System.out.println("showRegion");
										Region region1 = new Region();
										region1.calculateInitialLCZ(region);
										region1.showRegion();
									'''
								)
							]	
						]
					]
				}
				
					
			}
				
				
		}
	}
	
}
